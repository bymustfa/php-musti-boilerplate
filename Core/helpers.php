<?php/** * @param $key * @param null $default * @return mixed|null */function config($key, $default = null){    return \Arrilot\DotEnv\DotEnv::get($key, $default);}/** * @param $pass * @return string */function standartPass($pass){    return sha1(md5($pass));}/** * @param $pass * @return bool|false|string|null */function passwordHashing($pass){    $pass = standartPass($pass);    return password_hash($pass, PASSWORD_BCRYPT);}/** * @param $pass * @param $hash * @return bool */function passwodVerify($pass, $hash){    $pass = standartPass($pass);    return password_verify($pass, $hash);}/** * @param $pass * @return string */function otherPassHash($pass){    return base64_encode(strrev($pass .= "+" . md5(time())));}/** * @param $pass * @return mixed|string */function otherPassSalt($pass){    $pass = base64_decode($pass);    $pass = explode('+', strrev($pass))[0];    return $pass;}/** * @return string|string[] */function generateToken(){    $token = sha1(md5($pass));    $token = str_replace("=", '', $token);    $token = str_replace("/", '', $token);    $token = str_replace("?", '', $token);    $token = str_replace("&", '', $token);    $token = str_replace(".", '', $token);    $token = str_replace("$", '', $token);    return $token;}/** * @return \Core\Auth */function auth(){    return \Core\Auth::getInstance();}/** * @param string $url * @return string */function base_url($url = ""){    return config("BASE_URL") . $url;}/** * @param string $url * @return string */function admin_url($url = ""){    return base_url('admin/' . $url);}/** * @param string $url * @return string */function assetFront($url = ""){    return base_url("public/views/front/assets/" . $url);}/** * @param string $url * @return string */function assetAdmin($url = ""){    return base_url("public/views/admin/components/" . $url);}/** * @param $data * @return array|string */function dataClear($data){    if (is_array($data)) {        foreach ($data as $key => $value) {            $data[$key] = $value ? htmlspecialchars(trim(strip_tags($value))) : "";        }        return $data;    } else {        return $data ? htmlspecialchars(trim(strip_tags($data))) : "";    }}/** * @param array $content * @param int $status_code */function response($content = [], $status_code = 200){    $response = new \Symfony\Component\HttpFoundation\Response();    $response->setStatusCode($status_code);    $response->headers->set('Content-type', 'application/json');    $response->setContent(json_encode($content));    $response->send();}/** * @param $msg * @param string $type */function message($msg, $type = 'error'){    setcookie('msg', json_encode(['msg' => $msg, 'type' => $type]), time() + 2, '/');}/** * @param $name * @return bool|mixed */function cookie($name){    if (isset($_COOKIE[$name])) {        return json_decode($_COOKIE[$name]);    }    return false;}/** * @param $text * @param string $prefix * @return string */function slug($text, $prefix = "-"){    $slug = new Cocur\Slugify\Slugify();    return $slug->slugify($text, $prefix);}/** * @param $date * @param string $format * @return string */function format_date($date, $format = 'd/F/Y H:i'){    $date_formatter = new \Jenssegers\Date\Date();    $date_formatter->setLocale('tr');    return $date_formatter->parse($date)->format($format);}/** * @param $name * @return \Core\Upload */function upload($name){    return \Core\Upload::getInstance($name);}/** * @return string */function guid(){    if (function_exists('com_create_guid') === true) {        return trim(com_create_guid(), '{}');    }    return sprintf('%04X%04X-%04X-%04X-%04X-%04X%04X%04X', mt_rand(0, 65535), mt_rand(0, 65535), mt_rand(0, 65535), mt_rand(16384, 20479), mt_rand(32768, 49151), mt_rand(0, 65535), mt_rand(0, 65535), mt_rand(0, 65535));}/** * @return string */function imgDir(){    return 'uploads/' . date('Y') . '/' . date('m');}/** * @param $money * @return string */function money($money){    return number_format($money, 2, ",", ".");}/** * @param $url * @return \Symfony\Component\HttpFoundation\RedirectResponse */function redirect($url){    return new \Symfony\Component\HttpFoundation\RedirectResponse($url);}/** * @return string */function getActiveLang(){    return \Core\MultiLanguage::getActiveLang();}/** * @return mixed */function getActiveLangDetail(){    $langCode = getActiveLang();    return \App\Models\Languages::where(['short_code' => $langCode])->get()->first();}/** * @param $router * @param null $lang * @return string */function getRouterLink($router, $lang = null){    $lang = isset($lang) ? $lang : getActiveLang();    $link = \Core\MultiLanguage::getRouterLink($router);    $link = base_url($lang . "/" . $link);    return $link;}/** * @param $word * @return mixed|string */function getWord($word){    return \Core\MultiLanguage::getWord($word);}/** * @param $name * @return string */function static_folder($name){    return base_url("/uploads/static/" . $name);}/** * @param string $langCode * @return string */function toggle_lang($langCode = "en"){    $router = \Core\MultiLanguage::getRouterByLang($langCode);    $ex = explode(getActiveLang() . "/", $_SERVER['REQUEST_URI']);    $ex = explode("/", trim(end($ex)));    if (strlen($ex[0]) == 0) {        unset($ex[0]);    }    $find = end($ex);    $activeRouter = \Core\MultiLanguage::getRouter();    $key = "";    foreach ($activeRouter as $activeRout) {        if (is_array($activeRout['slug'])) {            if (array_search($find, $activeRout['slug'])) {                $key = $activeRout['router'];                break;            }        } elseif ($activeRout['slug'] == $find) {            $key = $activeRout['router'];            break;        } elseif (isset($activeRout['child'])) {            foreach ($activeRout['child'] as $child) {                if (is_array($child['slug'])) {                    if (array_search($find, $child['slug'])) {                        $key = $child['router'];                        break;                    }                } elseif ($child['slug'] == $find) {                    $key = $child['router'];                    break;                }            }        }    }    $link = \Core\MultiLanguage::getRouterLinkByLang($key, $langCode);    $link = base_url($langCode . "/" . $link);    return $link;}?>